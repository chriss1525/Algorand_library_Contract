#pragma version 8
intcblock 0 1
bytecblock 0x 0x151f7c75 0x00
txn NumAppArgs
intc_0 // 0
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0xda26ce3b // "start_game(address,address)bool"
==
bnz main_l7
txna ApplicationArgs 0
pushbytes 0xb4754e7d // "make_move(address,string)bool"
==
bnz main_l6
txna ApplicationArgs 0
pushbytes 0xdc814531 // "end_game(address)bool"
==
bnz main_l5
err
main_l5:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub endgamecaster_5
intc_1 // 1
return
main_l6:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub makemovecaster_4
intc_1 // 1
return
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub startgamecaster_3
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l10
err
main_l10:
txn ApplicationID
intc_0 // 0
==
assert
intc_1 // 1
return

// start_game
startgame_0:
proto 2 1
intc_0 // 0
intc_1 // 1
frame_bury 0
retsub

// make_move
makemove_1:
proto 2 1
intc_0 // 0
intc_0 // 0
frame_bury 0
retsub

// end_game
endgame_2:
proto 1 1
intc_0 // 0
intc_0 // 0
frame_bury 0
retsub

// start_game_caster
startgamecaster_3:
proto 0 0
intc_0 // 0
bytec_0 // ""
dup
txna ApplicationArgs 1
frame_bury 1
txna ApplicationArgs 2
frame_bury 2
frame_dig 1
frame_dig 2
callsub startgame_0
frame_bury 0
bytec_1 // 0x151f7c75
bytec_2 // 0x00
intc_0 // 0
frame_dig 0
setbit
concat
log
retsub

// make_move_caster
makemovecaster_4:
proto 0 0
intc_0 // 0
bytec_0 // ""
dup
txna ApplicationArgs 1
frame_bury 1
txna ApplicationArgs 2
frame_bury 2
frame_dig 1
frame_dig 2
callsub makemove_1
frame_bury 0
bytec_1 // 0x151f7c75
bytec_2 // 0x00
intc_0 // 0
frame_dig 0
setbit
concat
log
retsub

// end_game_caster
endgamecaster_5:
proto 0 0
intc_0 // 0
bytec_0 // ""
txna ApplicationArgs 1
frame_bury 1
frame_dig 1
callsub endgame_2
frame_bury 0
bytec_1 // 0x151f7c75
bytec_2 // 0x00
intc_0 // 0
frame_dig 0
setbit
concat
log
retsub